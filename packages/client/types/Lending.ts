/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface LendingInterface extends utils.Interface {
  functions: {
    "INTEREST_RATES()": FunctionFragment;
    "LOAN_DURATION()": FunctionFragment;
    "borrower()": FunctionFragment;
    "collateralAmount()": FunctionFragment;
    "collateralToken()": FunctionFragment;
    "getLatestPrice(address)": FunctionFragment;
    "lend()": FunctionFragment;
    "loan()": FunctionFragment;
    "loanAmount()": FunctionFragment;
    "loanToken()": FunctionFragment;
    "makeLoanRequest(address,uint256,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "INTEREST_RATES"
      | "LOAN_DURATION"
      | "borrower"
      | "collateralAmount"
      | "collateralToken"
      | "getLatestPrice"
      | "lend"
      | "loan"
      | "loanAmount"
      | "loanToken"
      | "makeLoanRequest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "INTEREST_RATES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOAN_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "borrower", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateralAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "lend", values?: undefined): string;
  encodeFunctionData(functionFragment: "loan", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "loanAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "loanToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "makeLoanRequest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "INTEREST_RATES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOAN_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrower", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loanAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loanToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeLoanRequest",
    data: BytesLike
  ): Result;

  events: {
    "LoanRequestAccepted(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LoanRequestAccepted"): EventFragment;
}

export interface LoanRequestAcceptedEventObject {
  loan: string;
}
export type LoanRequestAcceptedEvent = TypedEvent<
  [string],
  LoanRequestAcceptedEventObject
>;

export type LoanRequestAcceptedEventFilter =
  TypedEventFilter<LoanRequestAcceptedEvent>;

export interface Lending extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LendingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INTEREST_RATES(overrides?: CallOverrides): Promise<[BigNumber]>;

    LOAN_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrower(overrides?: CallOverrides): Promise<[string]>;

    collateralAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    getLatestPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lend(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    loan(overrides?: CallOverrides): Promise<[string]>;

    loanAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    loanToken(overrides?: CallOverrides): Promise<[string]>;

    makeLoanRequest(
      _collateralToken: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _loanToken: PromiseOrValue<string>,
      _loanAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  INTEREST_RATES(overrides?: CallOverrides): Promise<BigNumber>;

  LOAN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  borrower(overrides?: CallOverrides): Promise<string>;

  collateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  getLatestPrice(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lend(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  loan(overrides?: CallOverrides): Promise<string>;

  loanAmount(overrides?: CallOverrides): Promise<BigNumber>;

  loanToken(overrides?: CallOverrides): Promise<string>;

  makeLoanRequest(
    _collateralToken: PromiseOrValue<string>,
    _collateralAmount: PromiseOrValue<BigNumberish>,
    _loanToken: PromiseOrValue<string>,
    _loanAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    INTEREST_RATES(overrides?: CallOverrides): Promise<BigNumber>;

    LOAN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    borrower(overrides?: CallOverrides): Promise<string>;

    collateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    getLatestPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lend(overrides?: CallOverrides): Promise<void>;

    loan(overrides?: CallOverrides): Promise<string>;

    loanAmount(overrides?: CallOverrides): Promise<BigNumber>;

    loanToken(overrides?: CallOverrides): Promise<string>;

    makeLoanRequest(
      _collateralToken: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _loanToken: PromiseOrValue<string>,
      _loanAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LoanRequestAccepted(address)"(loan?: null): LoanRequestAcceptedEventFilter;
    LoanRequestAccepted(loan?: null): LoanRequestAcceptedEventFilter;
  };

  estimateGas: {
    INTEREST_RATES(overrides?: CallOverrides): Promise<BigNumber>;

    LOAN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    borrower(overrides?: CallOverrides): Promise<BigNumber>;

    collateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lend(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    loan(overrides?: CallOverrides): Promise<BigNumber>;

    loanAmount(overrides?: CallOverrides): Promise<BigNumber>;

    loanToken(overrides?: CallOverrides): Promise<BigNumber>;

    makeLoanRequest(
      _collateralToken: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _loanToken: PromiseOrValue<string>,
      _loanAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INTEREST_RATES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LOAN_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatestPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lend(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    loan(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeLoanRequest(
      _collateralToken: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _loanToken: PromiseOrValue<string>,
      _loanAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
