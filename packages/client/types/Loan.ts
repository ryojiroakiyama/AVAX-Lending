/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface LoanInterface extends utils.Interface {
  functions: {
    "borrower()": FunctionFragment;
    "collateralAmount()": FunctionFragment;
    "collateralToken()": FunctionFragment;
    "dueDate()": FunctionFragment;
    "lender()": FunctionFragment;
    "loanToken()": FunctionFragment;
    "payLoan()": FunctionFragment;
    "payoffAmount()": FunctionFragment;
    "repossess()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "borrower"
      | "collateralAmount"
      | "collateralToken"
      | "dueDate"
      | "lender"
      | "loanToken"
      | "payLoan"
      | "payoffAmount"
      | "repossess"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "borrower", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateralAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dueDate", values?: undefined): string;
  encodeFunctionData(functionFragment: "lender", values?: undefined): string;
  encodeFunctionData(functionFragment: "loanToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "payLoan", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payoffAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "repossess", values?: undefined): string;

  decodeFunctionResult(functionFragment: "borrower", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dueDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loanToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payoffAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repossess", data: BytesLike): Result;

  events: {
    "LoanPaid()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LoanPaid"): EventFragment;
}

export interface LoanPaidEventObject {}
export type LoanPaidEvent = TypedEvent<[], LoanPaidEventObject>;

export type LoanPaidEventFilter = TypedEventFilter<LoanPaidEvent>;

export interface Loan extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LoanInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrower(overrides?: CallOverrides): Promise<[string]>;

    collateralAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    dueDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    lender(overrides?: CallOverrides): Promise<[string]>;

    loanToken(overrides?: CallOverrides): Promise<[string]>;

    payLoan(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payoffAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    repossess(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  borrower(overrides?: CallOverrides): Promise<string>;

  collateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  dueDate(overrides?: CallOverrides): Promise<BigNumber>;

  lender(overrides?: CallOverrides): Promise<string>;

  loanToken(overrides?: CallOverrides): Promise<string>;

  payLoan(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payoffAmount(overrides?: CallOverrides): Promise<BigNumber>;

  repossess(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    borrower(overrides?: CallOverrides): Promise<string>;

    collateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    dueDate(overrides?: CallOverrides): Promise<BigNumber>;

    lender(overrides?: CallOverrides): Promise<string>;

    loanToken(overrides?: CallOverrides): Promise<string>;

    payLoan(overrides?: CallOverrides): Promise<void>;

    payoffAmount(overrides?: CallOverrides): Promise<BigNumber>;

    repossess(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "LoanPaid()"(): LoanPaidEventFilter;
    LoanPaid(): LoanPaidEventFilter;
  };

  estimateGas: {
    borrower(overrides?: CallOverrides): Promise<BigNumber>;

    collateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    dueDate(overrides?: CallOverrides): Promise<BigNumber>;

    lender(overrides?: CallOverrides): Promise<BigNumber>;

    loanToken(overrides?: CallOverrides): Promise<BigNumber>;

    payLoan(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payoffAmount(overrides?: CallOverrides): Promise<BigNumber>;

    repossess(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dueDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payLoan(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payoffAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repossess(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
